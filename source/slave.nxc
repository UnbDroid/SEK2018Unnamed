//SLAVE

/* Algumas coisas sobre comunicação
Para o escravo:
1 - Para o escravo enviar strings para o mestre utiliza-se a função SendResponseString(byte queue, string str);
byte queue: caixa onde a mensagem vai ser armazenada para envio (pode-se colocar de 0 a 9), eu defini uma constante OUTBOX
string str: a string que deseja enviar, pode-se colocar uma variável ou a mensagem diretamente entre parênteses
2 - Para o escravo enviar números para o mestre utiliza-se a função SendResponseNumber(byte queue, long val);
byte queue: caixa onde a mensagem vai ser armazenada para envio (pode-se colocar de 0 a 9), eu defini uma constante OUTBOX
long val: o número que deseja enviar, pode-se colocar uma variável ou o número direto
3 - Para o escravo receber números do mestre, utiliza-se a função ReceiveRemoteNumber(byte queue, bool clear, long &val);
byte queue: caixa de entrada onde a mensagem vai ser recebida (deve ser o mesmo número da caixa que foi mandada)
bool clear: true or false , caso seja true a cada mensagem nova que ele receber ele apaga a anterior, se for false ele guarda somente a primeira mensagem que receber
long &val: variável onde ele vai guardar o número recebido
4 - Para o escravo receber strings do mestre, utiliza-se a função ReceiveRemoteString(byte queue, bool clear, string &str);
byte queue: caixa de entrada onde a mensagem vai ser recebida (deve ser o mesmo número da caixa que foi mandada)
bool clear: true or false , caso seja true a cada mensagem nova que ele receber ele apaga a anterior, se for false ele guarda somente a primeira mensagem que receber
string &str: variavel onde ele vai guardar a string recebida
5 - Existe uma condição STAT_MSG_EMPTY_MAILBOX que serve para constatar que não existe novas mensagens recebidas
6 - Condição NO_ERR constata que não houve erro, igual no mestre

 */



#define INBOX6 6
#define BT_CONN 1
#define INBOX4 4
#define INBOX5 5
#define OUTBOX1 1
#define OUTBOX2 2
#define OUTBOX3 3
#define OUTBOX4 4
#define D_BONECO 25

#include "include/defines.h"

/* Função que checa a conexão bluetooth entre os cérebros */
sub BTCheck(int conn){
 if (!BluetoothStatus(conn)==NO_ERR){
 TextOut(5,LCD_LINE2,"Sem conexão.");
 Wait(1000);
 Stop(true);
 }
}

task main(){
 string in1, out1, out2, out3;
 int ufront_esq, ufront_dir, uside_esq, uside_dir;
 BTCheck(0); //checa a conexão com o mestre

 TextOut(10,LCD_LINE6,"Fdir:");
 TextOut(10,LCD_LINE4,"Fesq:");
 TextOut(50,LCD_LINE6,"Sdir:");
 TextOut(50,LCD_LINE4,"Sesq:");

 SetSensorLowspeed(FRONT_ULTRA_LEFT);
 SetSensorLowspeed(FRONT_ULTRA_RIGHT);
 SetSensorLowspeed(SIDE_ULTRA_LEFT);
 SetSensorLowspeed(SIDE_ULTRA_RIGHT);

 while(ReceiveRemoteString(INBOX5, true, in1) == STAT_MSG_EMPTY_MAILBOX);

 while(true) {
   string out4, in, out;
   /* Setando o sensor ultrassônico */
   SetSensorLowspeed(FRONT_ULTRA_LEFT);
   SetSensorLowspeed(FRONT_ULTRA_RIGHT);
   SetSensorLowspeed(SIDE_ULTRA_LEFT);
   SetSensorLowspeed(SIDE_ULTRA_RIGHT);

   ufront_esq = SensorUS(FRONT_ULTRA_LEFT);
   ufront_dir = SensorUS(FRONT_ULTRA_RIGHT);
   uside_esq = SensorUS(SIDE_ULTRA_LEFT);
   uside_dir = SensorUS(SIDE_ULTRA_RIGHT);


   /* Printando o número mandado na tela */
   NumOut(10,LCD_LINE5,ufront_esq);
   NumOut(10,LCD_LINE7,ufront_dir);
   NumOut(50,LCD_LINE5,uside_esq);
   NumOut(50,LCD_LINE7,uside_dir);

   Wait(500);
   ClearLine(LCD_LINE5);
   ClearLine(LCD_LINE7);

   /* Manda mensagem pro mestre */
   /* if(uside_esq<23 && uside_dir<23){
     out4 = "fimRampa";
     SendResponseString(OUTBOX4,out4);
   } else if(ufront_dir<30 && ufront_esq<30){
     out4 = "Rampa";
     SendResponseString(OUTBOX, out4);
   } else if(uside_dir<23){
     out4 = "turnRight";
     SendRespondeString(OUTBOX4, out4);
   } else */

    if (uside_esq < D_BONECO) {
     out4 = "turnLeft";
     SendResponseString(OUTBOX4,out4);
     while(ReceiveRemoteString(INBOX6, true, in) == STAT_MSG_EMPTY_MAILBOX);
     RemotePlayTone(BT_CONN, 500, 100);
    while(out!="Achei") {

      SendResponseNumber(OUTBOX2,ufront_dir);
      SendResponseNumber(OUTBOX3,ufront_esq);
    }


    }


    /* Manda os valores lidos nos ultrassons pro mestre */



     /* SendResponseNumber(OUTBOX2,ufront_dir);
     SendResponseNumber(OUTBOX3,uside_esq);
     SendResponseNumber(OUTBOX4,uside_dir);
     Wait(100); */

}}
