/*
  Arquivo: filesIO.nxc
  Descricao: Este arquivo contem as definicoes para criacao,
             leitura e escrita de arquivos.
  Autores: Renato Nobre
  Data de Modificacao: 13/09/2018
  Versao: 1.0
*/


#include "include/filesIO.h"

void initColorConf(colorConf &c, int id, float value) {
  c.id = id;
  c.value = value;
}

void logError(const unsigned int code) {
   TextOut(0, LCD_LINE2, "code            ");
   TextOut(50, LCD_LINE2, FormatNum("%04x", code));
}

int checkFileExistence(string fileName, unsigned int fileSize) {
  unsigned int rtn_code = CreateFile(fileName, fileSize, handle);
  CloseFile(handle);
  if (rtn_code == LDR_FILEEXISTS) {
    return 1;
  } else {
    return 0;
  }


}

void deleteFile(string fileName, unsigned int fileSize) {
  if (checkFileExistence(fileName, fileSize) == 1) {
    unsigned int rtn_code = DeleteFile(fileName);
  }
}

void openForWrite(string fileName, unsigned int fileSize) {
  handle = 0;

  // Start with the assumptions the file doesn't exist and needs to be created.
  unsigned int rtn_code = CreateFile(fileName, fileSize, handle);

  // If the file already exists, open it with the intent of adding to the data
  // that is already there.
  if (rtn_code == LDR_FILEEXISTS) {
    rtn_code = OpenFileAppend(fileName, fileSize, handle);
  }
  // Return code handling
  switch (rtn_code) {
    case LDR_SUCCESS:
       return;
    case LDR_FILEISFULL:
       TextOut(0, LCD_LINE1, "file is full    ");
       break;
    default:
       // Unanticipated exception.
       TextOut(0, LCD_LINE1, "write open      ");
       logError(rtn_code);
       break;
  }
}

void openForRead(string fileName, unsigned int fileSize) {
  unsigned int file_size = fileSize;
  handle = 0;
  unsigned int rtn_code = OpenFileRead(fileName, fileSize, handle);
  // Return code handling
  if (rtn_code != LDR_SUCCESS) {
     // Unanticipated exception.
     TextOut(0, LCD_LINE1, "read open       ");
     logError(rtn_code);
  }
}

void writeColorConfOnFile(const colorConf recd) {
  unsigned int rtn_code = Write(handle, recd);

  // Return code handling
  if (rtn_code != LDR_SUCCESS) {
     switch (rtn_code) {
       case LDR_EOFEXPECTED:
          TextOut(0, LCD_LINE1, "no more space   ");
          break;
       default:
          // Unanticipated exception.
          TextOut(0, LCD_LINE1, "write failed    ");
          logError(rtn_code);
          break;
     }
  }
}

void readColorConfFile(colorConf &reacd, colorConf &output[]) {
  unsigned int rtn_code = Read(handle, reacd);
  int i = 0;
  while (rtn_code != LDR_ENDOFFILE){
    if (rtn_code == LDR_SUCCESS) {
      output[i] = reacd;
    } else {
      // Unanticipated exception.
      TextOut(0, LCD_LINE1, "read failed     ");
      logError(rtn_code);
    }
    i += 1;
    rtn_code = Read(handle, reacd);
  }
}
