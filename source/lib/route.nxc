/*
  Arquivo: route.nxc
  Descricao: Este programa cotem toda a logica de
    programacao do percorrimento de percurso
  Autores: Renato Nobre, Valesca Soares
  Data de Modificacao: 14/10/2018
  Versao: 0.3
*/

#include "include/route.h"

typedef struct {
  int front;
  int left;
  int right;
}Directions;

int currentColor = 0;
int lastColor = UNDEFINED;
int turnCount = 0;

Directions dir;

void init_dir(Directions &dir){
  dir.front = DIR_UNKNOWN;
  dir.left = DIR_UNKNOWN;
  dir.right = DIR_UNKNOWN;
}

void recenter(ColorConf &defColors[]){
  if ((leftSensorColor(defColors) == ID_QUEDA) &&
      (rightSensorColor(defColors) == ID_QUEDA)) {
    Off(MOTOR_BOTH);
  } else if (leftSensorColor(defColors) == ID_QUEDA) {
    while (leftSensorColor(defColors) != ID_BRANCO) {
      OnRev(MOTOR_RIGHT, 40);
    }
  } else if (rightSensorColor(defColors) == ID_QUEDA){
    while (rightSensorColor(defColors) != ID_BRANCO) {
      OnRev(MOTOR_LEFT, 40);
    }
  }
}

int avoidFall(ColorConf &defColors[]){
  if ((leftSensorColor(defColors) == ID_QUEDA) ||
      (rightSensorColor(defColors) == ID_QUEDA)){
    /* Off(MOTOR_BOTH);
    recenter(defColors);
    Off(MOTOR_BOTH); */
    return TRUE;
  }
  return FALSE;
}

void adjustPosition(ColorConf &defColors[], int idColor) {
  Off(MOTOR_BOTH);
  if (leftSensorColor(defColors) == idColor){
    while(rightSensorColor(defColors) != idColor) {
      OnFwd(MOTOR_RIGHT, 40);
    }
  } else if (rightSensorColor(defColors) == idColor){
    while(leftSensorColor(defColors) != idColor) {
      OnFwd(MOTOR_LEFT, 40);
    }
  }
  Off(MOTOR_BOTH);
}

int trackPosControll(ColorConf &defColors[], int idColor) {
  int leftColor, rightColor;
  leftColor = leftSensorColor(defColors);
  rightColor = rightSensorColor(defColors);
  if (avoidFall(defColors) == FALSE){
    if (leftColor != idColor){
      /* adjustPosition(defColors, leftColor); */
    } else if (rightColor != idColor) {
      /* adjustPosition(defColors, rightColor); */
    }
    if((leftColor == ID_ERRO)||(rightColor == ID_ERRO)){
      leftColor = idColor;
    }
    return leftColor;
  } else {
    return ID_QUEDA;
  }
}

/* void ignoreUnknownColor(int leftColor, int rightColor) {
  if (leftColor == ID_ERRO) {
    return 0;
  }
  if (rightColor == ID_ERRO) {
    return 0;
  }
  return 1;
} */

void moveUntilWhite(ColorConf &defColors[]) {
  int leftColor, rightColor;
  leftColor = leftSensorColor(defColors);
  rightColor = rightSensorColor(defColors);
  start fowardPID;
  while ((leftColor != ID_BRANCO) &&
       (rightColor != ID_BRANCO)) {
   leftColor = leftSensorColor(defColors);
   rightColor = rightSensorColor(defColors);
  }
  stop fowardPID;
  Off(MOTOR_BOTH);
}



void moveUntilNotColor(ColorConf &defColors[], int idCor) {
  int leftColor, rightColor;
  leftColor = leftSensorColor(defColors);
  rightColor = rightSensorColor(defColors);
  start fowardPID;
  while ((leftColor == idCor) &&
       (rightColor == idCor)) {
   leftColor = leftSensorColor(defColors);
   rightColor = rightSensorColor(defColors);
   if (leftColor == ID_ERRO) {
     leftColor = idCor;
   }
   if (rightColor == ID_ERRO) {
     rightColor = idCor;
   }
  }
  stop fowardPID;
  Off(MOTOR_BOTH);
}

void centerOnIntersec() {
  fowardCm(19);
}

void evaluateDirection(int color) {
  if ((color != ID_PRETO) && (color != ID_QUEDA) && (color != ID_ERRO) && (color != ID_BRANCO)) {
    currentColor = color;
    if ((currentColor != ID_PRETO)&&(lastColor != UNDEFINED)&&(currentColor != lastColor)) {
      if ((turnCount == 1)&&(dir.right == DIR_UNKNOWN)){
          PlayTone(500, 500);
          dir.right = lastColor;
      } else if ((turnCount == 2)&&(dir.front == DIR_UNKNOWN)){
          PlayTone(500, 500);
          dir.front = lastColor;
      } else if ((turnCount == 3)&&(dir.left == DIR_UNKNOWN)) {
          PlayTone(500, 500);
          dir.left = lastColor;
      }
    }
    lastColor = currentColor;
  }
}

void startRoute(ColorConf &defColors[]) {
  init_dir(dir);
  Wait(50);
  while (true) {
    route(defColors);
  }
}

void route(ColorConf &defColors[]) {
  int color;
  moveUntilNotColor(defColors, ID_BRANCO);
  color = trackPosControll(defColors, ID_BRANCO);
  evaluateDirection(color);
  if (color == ID_PRETO) {
      make180(defColors, color);
  }
  else if ((color != ID_QUEDA)&&(color != ID_BRANCO)) {
      makeTurn(defColors, color);
  }
}

void leaveIntersec(ColorConf &defColors[], int idCor) {
  moveUntilWhite(defColors);
  trackPosControll(defColors, idCor);
  route(defColors);
}

void make180(ColorConf &defColors[], int idCor){
  turn(DIREITA, 180);
  leaveIntersec(defColors, idCor);
}

void makeTurn(ColorConf &defColors[], int idCor) {
  centerOnIntersec();
  if (idCor == DIR_UNKNOWN) {
    return;
  }

  if (idCor == dir.left) {
    PlayTone(TONE_C7, 500);
    Wait(10000);
    /* NumOut(0,LCD_LINE1,dir.left); */
    turn(ESQUERDA, ANGLE90);
    leaveIntersec(defColors, idCor);
  } else if (idCor == dir.right) {
      PlayTone(TONE_D7, 500);
      Wait(500);
      turn(DIREITA, ANGLE90);
      leaveIntersec(defColors, idCor);
  } else if (idCor == dir.front) {
    PlayTone(TONE_E7, 500);
    Wait(10000);
    leaveIntersec(defColors, idCor);
  } else {
    if (dir.right != DIR_UNKNOWN) {
      if (dir.front != DIR_UNKNOWN) {
        Wait(500);
        turn(ESQUERDA, ANGLE90);
        turnCount = 3;
      } else {
        turnCount = 2;
      }
    } else {
      PlayTone(TONE_G7, 500);
      Wait(500);
      turn(DIREITA, ANGLE90);
      turnCount = 1;
    }
    Wait(500);
    leaveIntersec(defColors, idCor);
  }
}
